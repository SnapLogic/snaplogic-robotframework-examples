services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: snaplogic-kafka-kraft
    environment:
      # KRaft Configuration (No Zookeeper!)
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      
      # Listeners Configuration
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      
      # Enable KRaft
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      
      # Topic Configuration
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_NUM_PARTITIONS: 3  # Default number of partitions for new topics
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      # Log retention (7 days default)
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_RETENTION_BYTES: 1073741824
      KAFKA_CFG_LOG_SEGMENT_BYTES: 1073741824
      
      # Performance Settings
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms256m"
      
      # Disable authentication for simplicity
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "${KAFKA_CONTROLLER_PORT:-9093}:9093"
      
    profiles: [ kafka, kafka-dev ]
    
    # Mount scripts for potential use inside container
    volumes:
      - kafka-kraft-data:/bitnami/kafka
      - ./scripts/kafka:/scripts:ro
      
    healthcheck:
      test: ["CMD-SHELL", "/scripts/kafka-healthcheck.sh || kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
      
    restart: unless-stopped
    
    # Resource limits for CI stability
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
          
    networks:
      - snaplogicnet

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: snaplogic-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: snaplogic-kafka-kraft
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
      # CI-friendly memory settings
      JAVA_OPTS: "-Xmx256m -Xms128m -XX:+UseContainerSupport"
    ports:
      - "${KAFKA_UI_PORT:-8080}:8080"
    profiles: [ kafka, kafka-dev ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # Resource limits for CI stability
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - snaplogicnet

  kafka-setup:
    image: bitnami/kafka:3.7
    container_name: snaplogic-kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts/kafka:/scripts:ro
    entrypoint: ["/bin/bash"]
    command: ["/scripts/kafka-setup.sh"]
    profiles: [ kafka ]
    networks:
      - snaplogicnet
    restart: "no"

  # Optional: Kafka test producer service (can be run on demand)
  kafka-test-producer:
    image: bitnami/kafka:3.7
    container_name: snaplogic-kafka-test-producer
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts/kafka:/scripts:ro
    entrypoint: ["/bin/bash"]
    command: ["/scripts/kafka-test-producer.sh"]
    profiles: [ kafka-test ]
    networks:
      - snaplogicnet
    restart: "no"

  # Optional: Kafka cleanup service (can be run on demand)
  kafka-cleanup:
    image: bitnami/kafka:3.7
    container_name: snaplogic-kafka-cleanup
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts/kafka:/scripts:ro
    entrypoint: ["/bin/bash"]
    command: ["/scripts/kafka-cleanup.sh"]
    profiles: [ kafka-cleanup ]
    networks:
      - snaplogicnet
    restart: "no"

# Temporary volumes for CI environments
volumes:
  kafka-kraft-data:
    driver: local

networks:
  snaplogicnet:
    driver: bridge
