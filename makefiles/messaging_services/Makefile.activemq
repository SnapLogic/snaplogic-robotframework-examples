# =============================================================================
# 📡 ActiveMQ JMS Server Management
# =============================================================================
# This file contains targets for ActiveMQ JMS messaging service
# =============================================================================

.PHONY: activemq-start activemq-dev-start activemq-stop activemq-status activemq-setup run-jms-demo

# Include common configuration
include makefiles/common_services/Makefile.common

# =============================================================================
# ActiveMQ Service Management
# =============================================================================

# 🚀 Start ActiveMQ JMS server with setup
activemq-start:
	@echo "Starting ActiveMQ JMS server..."
	$(DOCKER_COMPOSE) --profile activemq up -d activemq activemq-setup
	@echo "⏳ Waiting for ActiveMQ to fully initialize..."
	@sleep 15
	@echo "✅ ActiveMQ started. Web Console: http://localhost:8161/console"
	@echo "🔑 Credentials: admin/admin"

# 🚀 Start ActiveMQ JMS server for development (no setup)
activemq-dev-start:
	@echo "Starting ActiveMQ JMS server (dev mode)..."
	$(DOCKER_COMPOSE) --profile activemq-dev up -d activemq
	@echo "⏳ Waiting for ActiveMQ to fully initialize..."
	@sleep 15
	@echo "✅ ActiveMQ started in dev mode."

# ⛔ Stop ActiveMQ JMS server
activemq-stop:
	@echo "Stopping ActiveMQ JMS server..."
	$(DOCKER_COMPOSE) stop activemq activemq-setup 2>/dev/null || true
	@echo "✅ ActiveMQ stopped."

# 🔍 Check ActiveMQ JMS server status and connection
activemq-status:
	@echo "🔍 Checking ActiveMQ status..."
	@container_status=$$(docker inspect -f '{{.State.Status}}' snaplogic-activemq 2>/dev/null || echo "not found"); \
	if [ "$$container_status" = "running" ]; then \
		echo "✅ ActiveMQ container is running"; \
		echo "🌐 Web Console: http://localhost:8161/console"; \
		echo "📡 JMS URL: tcp://localhost:61616"; \
		echo "🔑 Credentials: admin/admin"; \
		echo "🧪 Testing web console connection..."; \
		if curl -s -f -u admin:admin http://localhost:8161/console/ >/dev/null 2>&1; then \
			echo "✅ Web console is accessible"; \
		else \
			echo "⚠️  Web console not yet ready (may still be starting)"; \
		fi; \
	else \
		echo "❌ ActiveMQ container is not running (status: $$container_status)"; \
		echo "💡 Run 'make activemq-start' to start ActiveMQ"; \
	fi

# 🔧 Run ActiveMQ setup and display connection info
activemq-setup:
	@echo "🔧 Running ActiveMQ setup and displaying connection info..."
	@$(MAKE) activemq-status
	@echo ""
	@echo "📋 Queue Suggestions for SAP IDOC Integration:"
	@echo "   • sap.idoc.queue - Main queue for SAP IDOC messages"
	@echo "   • test.queue - Queue for testing and development"
	@echo "   • demo.queue - Queue for demonstrations"
	@echo ""
	@echo "🛠️  Sample JMS Connection Properties:"
	@echo "   • Broker URL: tcp://localhost:61616"
	@echo "   • Username: admin"
	@echo "   • Password: admin"
	@echo "   • Connection Factory: ConnectionFactory"
	@echo ""
	@echo "💡 Queues are auto-created when first accessed"
	@echo "💡 Use the web console to monitor queues and messages"

# 🧪 Run JMS demo script (placeholder for future implementation)
run-jms-demo:
	@echo "🧪 JMS Demo Script"
	@echo "📝 This target is ready for your JMS demo implementation"
	@echo "💡 Consider creating: test/suite/test_data/python_helper_files/jms_demo.py"
	@echo ""
	@echo "🔧 Connection details for your demo:"
	@echo "   • JMS URL: tcp://localhost:61616"
	@echo "   • Username: admin"
	@echo "   • Password: admin"
	@echo "   • Suggested queues: sap.idoc.queue, test.queue, demo.queue"
	@echo ""
	@echo "📚 Example libraries: pyjms, stomp.py, or py4j with ActiveMQ client"
