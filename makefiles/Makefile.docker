# =============================================================================
# Docker & Tools Container Management
# =============================================================================
# This file contains targets for managing Docker containers, tools, and
# development environment setup including environment validation
# =============================================================================

.PHONY: snaplogic-start-services snaplogic-stop snaplogic-build-tools snaplogic-stop-tools \
        start-services check-env clean-start ensure-config-dir \
        rebuild-tools quick-update-snaplogic-robot-only

# Include common configuration
include makefiles/Makefile.common

# =============================================================================
# üõ†Ô∏è SnapLogic Tools Container Lifecycle
# =============================================================================

# üì¶ Build tools container image 
snaplogic-build-tools: snaplogic-stop-tools
	@echo "üî® Building tools container image..."
	@echo "‚ÑπÔ∏è This may take a few minutes..."
	$(DOCKER_COMPOSE) build --no-cache tools
	@echo "‚úÖ Tools container built successfully!"

snaplogic-stop-tools:
	@echo "üõë Stopping tools container..."
	$(DOCKER_COMPOSE) stop tools || true
	$(DOCKER_COMPOSE) rm -f tools || true
	@echo "‚úÖ Tools container stopped"

# =============================================================================
# üöÄ Service Management
# =============================================================================

# Start services using Docker Compose with selected profiles
start-services:
	@echo "üöÄ [Phase 2] Starting containers using compose profiles: $(COMPOSE_PROFILES)"
	COMPOSE_PROFILES=$(COMPOSE_PROFILES) $(DOCKER_COMPOSE) up -d
	@echo "‚è≥ Waiting for services to stabilize..."
	@sleep 30
	@echo "‚úÖ Services started successfully!"

# Build & Start snaplogic services in compose profile 
snaplogic-start-services: 
	@echo "=========================================================================="
	@echo "üöÄ Starting services/containers using COMPOSE_PROFILES..."
	@echo "=========================================================================="
	COMPOSE_PROFILES=$(COMPOSE_PROFILES) $(DOCKER_COMPOSE) up -d
	@echo "‚è≥ Waiting for services to stabilize..."
	@sleep 30
	@echo "‚úÖ All services are up and running!"

# Stop all snaplogic containers and clean up
snaplogic-stop:
	@echo "üõë Stopping SnapLogic App..."
	@echo "‚ÑπÔ∏è Stopping containers connected to snaplogic-network..."
	@docker ps -a --filter network=snaplogic-network --format "{{.ID}}" | xargs -r docker stop || true
	@echo "üßπ Removing stopped containers..."
	@docker container prune -f || true
	@echo "‚ÑπÔ∏è Running docker compose down..."
	$(DOCKER_COMPOSE) down --remove-orphans
	$(DOCKER_COMPOSE) --profile tools down --volumes --remove-orphans
	@echo "üßπ Ensuring snaplogic-network is removed..."
	@docker network rm snaplogic-network 2>/dev/null || true
	@echo "‚úÖ SnapLogic stopped and cleaned up successfully!"

# =============================================================================
# ‚úÖ Environment Validation
# =============================================================================

check-env:
	@if [ -f ".env" ]; then \
		echo "‚úÖ Found .env file at: .env"; \
	else \
		echo "‚ùå Error: .env file not found at .env"; \
		echo "‚ÑπÔ∏è Please ensure .env file exists in project root."; \
		echo "Current directory: $$(pwd)"; \
		echo "Files in current directory:"; \
		ls -la | grep -E '\.env' || true; \
		exit 1; \
	fi

ensure-config-dir:
	@echo "‚ÑπÔ∏è Creating config directory..."
	@mkdir -p ./test/.config
	@echo "‚úÖ Config directory ready"

# =============================================================================
# üßπ Clean Restart & Workflow Management
# =============================================================================

# Clean restart of all relevant services and DB
clean-start: snaplogic-stop snaplogic-start-services createplex-launch-groundplex
	@echo "‚úÖ Clean start complete!"
	@echo "üöÄ You should be good to go!"

# =============================================================================
# üõ†Ô∏è Tools Container Updates & Rebuilds
# =============================================================================

# Rebuild tools container with updated requirements
# This target is useful for development when you need to update the tools container 
# if there are changes in the requirements.txt file
rebuild-tools:
	@echo "üõë Stopping and removing tools container..."
	$(DOCKER_COMPOSE) --profile tools down
	
	@echo "üßπ Removing old image to force complete rebuild..."
	@docker rmi snaplogic-test-example:latest || true
	
	@echo "üî® Building tools container without cache..."
	@echo "‚ÑπÔ∏è This will take several minutes..."
	$(DOCKER_COMPOSE) build --no-cache tools
	
	@echo "üöÄ Starting tools container..."
	$(DOCKER_COMPOSE) --profile tools up -d
	
	@echo "‚è≥ Waiting for container to be ready..."
	@sleep 5
	
	@echo "‚úÖ Verifying snaplogic-common-robot version..."
	@$(DOCKER_COMPOSE) exec tools pip show snaplogic-common-robot
	@echo "‚úÖ Rebuild complete!"

# üì¶ Update snaplogic-common-robot to absolute latest
# This target is useful for quick updates without rebuilding the entire tools container
quick-update-snaplogic-robot-only:
	@echo "üì¶ Force updating snaplogic-common-robot to latest version..."
	@echo "‚ÑπÔ∏è Current version:"
	@$(DOCKER_COMPOSE) exec -T tools pip show snaplogic-common-robot || echo "‚ö†Ô∏è Not installed"
	@echo "üßπ Uninstalling current version..."
	@$(DOCKER_COMPOSE) exec -T tools pip uninstall -y snaplogic-common-robot
	@echo "üì¶ Installing latest version from PyPI..."
	@$(DOCKER_COMPOSE) exec -T tools pip install --no-cache-dir snaplogic-common-robot
	@echo "‚úÖ New version:"
	@$(DOCKER_COMPOSE) exec -T tools pip show snaplogic-common-robot
	@echo "‚úÖ Update complete!"
