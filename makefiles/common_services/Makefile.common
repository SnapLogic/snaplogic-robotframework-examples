# =============================================================================
# Common Configuration for All Makefiles
# =============================================================================
# This file contains shared variables and settings used across all Makefiles
# Include this at the top of every category Makefile
# =============================================================================

# Guard against multiple inclusion
ifndef MAKEFILE_COMMON_INCLUDED
MAKEFILE_COMMON_INCLUDED := 1

# -----------------------------------------------------------------------------
# Docker Configuration
# -----------------------------------------------------------------------------
# Environment Files Configuration
# Loads all .env files from the env_files directory AND root .env file
# IMPORTANT: Root .env file is loaded LAST and takes HIGHEST PRECEDENCE
# This means variables in .env will override the same variables in other files
# Will throw an error if root .env file is not found
# Can be overridden to use specific files or directories
# Usage examples:
#   make robot-run-tests                                    # Uses all files from env_files/ + .env (with .env taking precedence)
#   make robot-run-tests ENV_FILES=".env .env.staging"     # Use specific files (last file takes precedence)
#   make robot-run-tests ENV_DIR="./production-env"        # Use different directory

# Directory containing env files
ENV_DIR ?= env_files

# Root .env file is required
ROOT_ENV_FILE := .env

# Get all env files from the directory and subdirectories (both .env and .env.* patterns)
# Using find command for recursive search - works on Linux/Mac/WSL2
ENV_FILES_FROM_DIR := $(shell find $(ENV_DIR) -type f \( -name '.env' -o -name '.env.*' -o -name '*.env' \) 2>/dev/null | sort)

# Allow manual override of ENV_FILES
# If ENV_FILES is not set, combine files from ENV_DIR with root .env
# IMPORTANT: .env is loaded LAST so it takes precedence over all other files
ENV_FILES ?= $(ENV_FILES_FROM_DIR) $(ROOT_ENV_FILE)

# Check if root .env exists - throw error if not found
ifeq (,$(wildcard $(ROOT_ENV_FILE)))
    $(error Root .env file not found in project root! Please create a .env file in the project root directory)
endif

# Check if env files exist in directory - just warn if not found
ifeq ($(strip $(ENV_FILES_FROM_DIR)),)
    $(info Warning: No .env files found in $(ENV_DIR)/ directory. Using only root .env file)
endif

# Build --env-file flags for docker compose
# This creates multiple --env-file flags, one for each file
ENV_FILE_FLAGS := $(foreach file,$(ENV_FILES),--env-file $(file))

# Docker compose file location
DOCKER_COMPOSE_FILE := docker-compose.yml
DOCKER_COMPOSE := docker compose $(ENV_FILE_FLAGS) -f $(DOCKER_COMPOSE_FILE)

# Docker Compose profiles - Define ONCE here, use everywhere
# Can be overridden via command line: make start-services COMPOSE_PROFILES=kafka,oracle-dev
COMPOSE_PROFILES ?= tools,oracle-dev,minio,postgres-dev,mysql-dev,sqlserver-dev,salesforce-mock-start,email-mock

# -----------------------------------------------------------------------------
# Common Variables
# -----------------------------------------------------------------------------
# Date format for timestamping
DATE := $(shell date +'%Y-%m-%d-%H-%M')

# Shell to use for commands
SHELL := /bin/bash

# Project paths
PROJECT_ROOT := $(shell pwd)
TEST_DIR := test
ROBOT_OUTPUT_DIR := robot_output

# -----------------------------------------------------------------------------
# AWS Configuration (for S3 uploads)
# -----------------------------------------------------------------------------
S3_BUCKET := artifacts.slimdev.snaplogic
S3_PREFIX := RF_CommonTests_Results

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------
# Default number of parallel processes for testing
DEFAULT_PROCESSES := 5

# Default robot framework settings
ROBOT_DEFAULT_TIMEOUT := 30s

# -----------------------------------------------------------------------------
# Export variables for child make processes
# -----------------------------------------------------------------------------
export COMPOSE_PROFILES
export DOCKER_COMPOSE
export DATE

# -----------------------------------------------------------------------------
# Debug/Info Targets
# -----------------------------------------------------------------------------
# Guard against multiple inclusion
ifndef COMMON_DEBUG_TARGETS_DEFINED
COMMON_DEBUG_TARGETS_DEFINED := 1

# Show which env files are being loaded
# Show which env files are being loaded
show-env-files:
	@echo "========================================"
	@echo "Environment Files Configuration:"
	@echo "========================================"
	@echo "Root ENV file: $(ROOT_ENV_FILE)"
	@echo "ENV_DIR: $(ENV_DIR)"
	@echo ""
	@echo "ENV_FILES being loaded (in order):"

	@if [ -z "$(ENV_FILES)" ]; then \
	echo "  (No ENV files configured)"; \
else \
	for file in $(ENV_FILES); do \
		if [ -f "$$file" ]; then \
			echo "  ✓ $$file (exists)"; \
		else \
			echo "  ✗ $$file (NOT FOUND)"; \
		fi; \
	done; \
fi

	@echo "========================================"
	@echo "Loading Order & Precedence:"
	@echo "  1. Files from $(ENV_DIR)/ and subdirectories load first (sorted alphabetically)"
	@echo "  2. Root .env loads LAST (HIGHEST PRECEDENCE - overwrites all others)"
	@echo ""
	@echo "  ⚠️  IMPORTANT: Variables in .env will OVERRIDE the same variables in other files!"
	@echo "========================================"
	@echo "Docker Compose Command:"
	@echo "$(DOCKER_COMPOSE)"
	@echo "========================================"

# Show snaplogic-common-robot package version and location
# To run these commands manually in terminal:
# 1. First ensure container is running:
#    docker ps | grep snaplogic-test-example-tools-container
# 2. If not running, start it:
#    docker-compose --profile tools up -d
# 3. Check package info:
#    docker exec snaplogic-test-example-tools-container pip show snaplogic-common-robot | grep -E 'Version:|Location:'
# 4. Or get into container and check:
#    docker exec -it snaplogic-test-example-tools-container /bin/bash
#    pip show snaplogic-common-robot
#    cd /usr/local/lib/python3.12/site-packages/snaplogic_common_robot
#    ls -la
#
# To see any keyword Eg:Create Triggered Task From Template keyword content:
# 5. Quick view (50 lines):
#    docker exec snaplogic-test-example-tools-container bash -c "find /usr/local/lib -name 'snaplogic_keywords.resource' -exec grep -A 50 'Create Triggered Task From Template' {} \;"
# 6. View more lines (100 lines):
#    docker exec snaplogic-test-example-tools-container bash -c "find /usr/local/lib -name 'snaplogic_keywords.resource' -exec grep -A 100 'Create Triggered Task From Template' {} \;"
# 7. View complete keyword definition:
#    docker exec snaplogic-test-example-tools-container bash -c "find /usr/local/lib -name 'snaplogic_keywords.resource' -exec sed -n '/^Create Triggered Task From Template$/,/^[A-Z][A-Za-z ]* *$/p' {} \;"

show-common-robot:
	@echo "========================================"
	@echo "snaplogic-common-robot Package Info"
	@echo "========================================"
	@docker exec snaplogic-test-example-tools-container bash -c " \
		pip show snaplogic-common-robot | grep -E 'Version:|Location:' \
	" || echo "Container not running. Please run: make tools-start"
	@echo "========================================"

endif # COMMON_DEBUG_TARGETS_DEFINED

endif # MAKEFILE_COMMON_INCLUDED
