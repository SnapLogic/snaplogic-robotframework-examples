# =============================================================================
# Code Quality & Dependencies Management
# =============================================================================
# This file contains targets for code formatting, linting, and dependency management
# =============================================================================

.PHONY: robotidy robocop lint \
        install-requirements-local install-requirements-venv update-requirements-all clean-install-requirements \
        reinstall-requirements-docker install-snaplogic-common-robot show-snaplogic-version

# Include common configuration
include makefiles/common_services/Makefile.common

# =============================================================================
# 🧽 Code Quality - Robot Framework
# =============================================================================

# Format Robot files using Robotidy
robotidy:
	@echo "✨ Running Robotidy to auto-format .robot files..."
	@robotidy test/

# Run Robocop for static lint checks
robocop:
	@echo "🔍 Running Robocop for lint checks..."
	@robocop test/

# Run both formatter and linter
lint: robotidy robocop
	@echo "✅ Linting and formatting completed."

# =============================================================================
# 📦 Python Dependencies Management
# =============================================================================

# Install requirements in local virtual environment
install-requirements-local:
	@echo "📦 Installing requirements in local environment..."
	@if [ -z "$VIRTUAL_ENV" ]; then \
		echo "❌ No virtual environment activated!"; \
		echo "💡 Please activate your virtual environment first:"; \
		echo "   source ../.venv/bin/activate"; \
		echo "   or use: make install-requirements-venv"; \
		exit 1; \
	fi
	@echo "✅ Virtual environment detected: $VIRTUAL_ENV"
	@echo "🔧 Installing requirements..."
	pip install -r src/tools/requirements.txt
	@echo "✅ Requirements installed successfully!"
	@echo "📋 Installed packages:"
	@pip list | head -20

# Activate venv and install requirements (all-in-one)
install-requirements-venv:
	@echo "🐍 Setting up virtual environment and installing requirements..."
	@if [ ! -d "../.venv" ]; then \
		echo "❌ Virtual environment not found at ../.venv"; \
		echo "💡 Creating new virtual environment..."; \
		python3 -m venv ../.venv; \
	fi
	@echo "🧹 Cleaning up old robotframework-kafkalibrary if present..."
	@../.venv/bin/pip uninstall -y robotframework-kafkalibrary 2>/dev/null || true
	@echo "📦 Installing requirements in virtual environment..."
	@../.venv/bin/pip install --upgrade pip
	@../.venv/bin/pip install --upgrade --force-reinstall -r src/tools/requirements.txt
	@echo "✅ Requirements installed successfully!"
	@echo "💡 To activate the virtual environment, run:"
	@echo "   source ../.venv/bin/activate"

# Update requirements Docker tools container
update-requirements-all: install-requirements-venv
	@echo "🔄 Updating Docker tools container..."
	@if docker ps | grep -q snaplogic-test-example-tools-container; then \
		echo "📋 Copying requirements to running container..."; \
		docker cp src/tools/requirements.txt snaplogic-test-example-tools-container:/app/src/tools/requirements.txt; \
		echo "📦 Installing in container..."; \
		docker exec snaplogic-test-example-tools-container pip install -r /app/src/tools/requirements.txt; \
		echo "✅ Docker container updated!"; \
	else \
		echo "⚠️  Tools container not running. Run 'make rebuild-tools' to rebuild."; \
	fi

# Clean and reinstall requirements in venv
clean-install-requirements:
	@echo "🧹 Clean installing requirements..."
	@if [ -z "$VIRTUAL_ENV" ]; then \
		echo "⚠️  Activating virtual environment..."; \
		source ../.venv/bin/activate; \
	fi
	@echo "🗑️  Removing all packages..."
	@pip freeze | xargs pip uninstall -y 2>/dev/null || true
	@echo "📦 Installing fresh requirements..."
	@pip install --upgrade pip
	@pip install -r src/tools/requirements.txt
	@echo "✅ Clean install completed!"

# Reinstall and verify requirements in running Docker container (fast refresh)
reinstall-requirements-docker:
	@echo "⚡ Reinstalling and verifying requirements in Docker container..."
	@echo ""
	@echo "📋 Step 1/4: Checking if container is running..."
	@if ! docker ps | grep -q snaplogic-test-example-tools-container; then \
		echo "❌ Error: Container 'snaplogic-test-example-tools-container' is not running!"; \
		echo "💡 Start it first with: make start-tools"; \
		exit 1; \
	fi
	@echo "✅ Container is running"
	@echo ""
	@echo "📦 Step 2/4: Reinstalling requirements.txt..."
	@echo "   Using: pip install -r /app/requirements.txt --force-reinstall --no-cache-dir"
	@docker exec snaplogic-test-example-tools-container pip install -r /app/requirements.txt --force-reinstall --no-cache-dir
	@echo "✅ Requirements reinstalled successfully!"
	@echo ""
	@echo "🔍 Step 3/4: Checking installed packages..."
	@echo "📋 Installed packages (first 25):"
	@docker exec snaplogic-test-example-tools-container pip list | head -25
	@echo ""
	@echo "🔍 Checking critical packages:"install-snaplogic-common-robot
	@echo "   ✓ Robot Framework:"
	@docker exec snaplogic-test-example-tools-container pip show robotframework | grep -E "^(Name|Version):"
	@echo "   ✓ Requests Library:"
	@docker exec snaplogic-test-example-tools-container pip show robotframework-requests | grep -E "^(Name|Version):"
	@echo "   ✓ Database Library:"
	@docker exec snaplogic-test-example-tools-container pip show robotframework-databaselibrary | grep -E "^(Name|Version):"
	@echo ""
	@echo "🧪 Step 4/4: Testing imports..."
	@docker exec snaplogic-test-example-tools-container python -c "import robot; print('   ✅ Robot Framework imported successfully')"
	@docker exec snaplogic-test-example-tools-container python -c "import RequestsLibrary; print('   ✅ RequestsLibrary imported successfully')"
	@docker exec snaplogic-test-example-tools-container python -c "import DatabaseLibrary; print('   ✅ DatabaseLibrary imported successfully')"
	@echo ""
	@echo "🎉 All done! Requirements have been reinstalled and verified successfully."

# Install/update only snaplogic-common-robot in Docker container
install-snaplogic-common-robot:
	@echo "🚀 Installing snaplogic-common-robot in Docker container..."
	@echo ""
	@echo "📋 Step 1/4: Checking if container is running..."
	@if ! docker ps | grep -q snaplogic-test-example-tools-container; then \
		echo "❌ Error: Container 'snaplogic-test-example-tools-container' is not running!"; \
		echo "💡 Start it first with: make start-tools"; \
		exit 1; \
	fi
	@echo "✅ Container is running"
	@echo ""
	@echo "🔧 Step 2/4: Installing setuptools (required dependency)..."
	@docker exec snaplogic-test-example-tools-container pip install setuptools --quiet
	@echo "✅ setuptools installed"
	@echo ""
	@echo "📦 Step 3/4: Installing snaplogic-common-robot..."
	@echo "   Using: pip install snaplogic-common-robot --force-reinstall --no-cache-dir"
	@docker exec snaplogic-test-example-tools-container pip install snaplogic-common-robot --force-reinstall --no-cache-dir
	@echo "✅ snaplogic-common-robot installed successfully!"
	@echo ""
	@echo "🔍 Step 4/4: Verifying installation..."
	@echo "   Package details:"
	@docker exec snaplogic-test-example-tools-container pip show snaplogic-common-robot
	@echo ""
	@echo "   Testing import:"
	@docker exec snaplogic-test-example-tools-container python -c "import snaplogic_common_robot; print('   ✅ snaplogic-common-robot imported successfully')"
	@echo ""
	@echo "🎉 Done! snaplogic-common-robot has been installed and verified."

# Show snaplogic-common-robot version
show-snaplogic-version:
	@echo "📦 SnapLogic Common Robot Library Version"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@if ! docker ps | grep -q snaplogic-test-example-tools-container; then \
		echo "❌ Error: Container 'snaplogic-test-example-tools-container' is not running!"; \
		echo "💡 Start it first with: make start-tools"; \
		exit 1; \
	fi
	@docker exec snaplogic-test-example-tools-container pip show snaplogic-common-robot | grep -E "^(Name|Version|Location):" || echo "❌ snaplogic-common-robot not installed"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
