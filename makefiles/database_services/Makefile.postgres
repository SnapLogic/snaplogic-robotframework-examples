# =============================================================================
# PostgreSQL Database Management
# =============================================================================
# This file contains PostgreSQL database specific targets
# =============================================================================

.PHONY: postgres-start postgres-stop postgres-logs postgres-shell postgres-status \
        postgres-restart postgres-backup postgres-restore postgres-help

# Include common configuration
include makefiles/common_services/Makefile.common

# =============================================================================
# 🐘 PostgreSQL Configuration
# =============================================================================
POSTGRES_CONTAINER_NAME := postgres-db
POSTGRES_PROFILE := postgres-dev
POSTGRES_PORT := 5432
POSTGRES_USER := postgres
POSTGRES_PASSWORD := snaplogic
POSTGRES_DATABASE := snaplogic

# =============================================================================
# 🚀 PostgreSQL Commands
# =============================================================================

# Start PostgreSQL database
postgres-start:
	@echo "🐘 Starting PostgreSQL Database..."
	$(DOCKER_COMPOSE) --profile $(POSTGRES_PROFILE) up -d $(POSTGRES_CONTAINER_NAME)
	@echo "✅ PostgreSQL database started"
	@echo "📊 Connection details:"
	@echo "   - Host: localhost"
	@echo "   - Port: $(POSTGRES_PORT)"
	@echo "   - Database: $(POSTGRES_DATABASE)"
	@echo "   - User: $(POSTGRES_USER)"
	@echo "   - Password: $(POSTGRES_PASSWORD)"

# Stop PostgreSQL database
postgres-stop:
	@echo "🛑 Stopping PostgreSQL container..."
	$(DOCKER_COMPOSE) stop $(POSTGRES_CONTAINER_NAME) || true
	@echo "🧹 Removing PostgreSQL container and volumes..."
	$(DOCKER_COMPOSE) rm -f -v $(POSTGRES_CONTAINER_NAME) || true
	@echo "🗑️  Cleaning up PostgreSQL volumes..."
	docker volume rm $$(docker volume ls -q | grep postgres) 2>/dev/null || true
	@echo "✅ PostgreSQL stopped and cleaned up."

# View PostgreSQL logs
postgres-logs:
	@echo "📜 Viewing PostgreSQL logs..."
	$(DOCKER_COMPOSE) logs -f $(POSTGRES_CONTAINER_NAME)

# Access PostgreSQL shell
postgres-shell:
	@echo "🐚 Accessing PostgreSQL shell (psql)..."
	docker exec -it $(POSTGRES_CONTAINER_NAME) psql -U $(POSTGRES_USER) -d $(POSTGRES_DATABASE)

# Check PostgreSQL status
postgres-status:
	@echo "📊 PostgreSQL Database Status:"
	@docker ps -a --filter name=$(POSTGRES_CONTAINER_NAME) --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@if docker ps --filter name=$(POSTGRES_CONTAINER_NAME) --format "{{.Names}}" | grep -q $(POSTGRES_CONTAINER_NAME); then \
		echo "✅ PostgreSQL is running"; \
		echo "🔍 Testing connection..."; \
		docker exec $(POSTGRES_CONTAINER_NAME) psql -U $(POSTGRES_USER) -d $(POSTGRES_DATABASE) -c "SELECT version();" 2>/dev/null || echo "⚠️  Connection test failed"; \
	else \
		echo "❌ PostgreSQL is not running"; \
	fi

# Restart PostgreSQL database
postgres-restart: postgres-stop postgres-start

# Backup PostgreSQL database
postgres-backup:
	@echo "💾 Backing up PostgreSQL database..."
	@mkdir -p backups/postgres
	@docker exec $(POSTGRES_CONTAINER_NAME) pg_dump -U $(POSTGRES_USER) $(POSTGRES_DATABASE) > backups/postgres/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "✅ Backup completed to backups/postgres/"

# Restore PostgreSQL database from backup
postgres-restore:
	@echo "📥 Available backups:"
	@ls -la backups/postgres/*.sql 2>/dev/null || echo "No backups found"
	@echo ""
	@echo "To restore a backup, run:"
	@echo "  docker exec -i $(POSTGRES_CONTAINER_NAME) psql -U $(POSTGRES_USER) $(POSTGRES_DATABASE) < backups/postgres/[backup_file].sql"

# Create test database and tables
postgres-init:
	@echo "🔧 Initializing PostgreSQL test database..."
	@docker exec $(POSTGRES_CONTAINER_NAME) psql -U $(POSTGRES_USER) -c "CREATE DATABASE IF NOT EXISTS $(POSTGRES_DATABASE);"
	@docker exec $(POSTGRES_CONTAINER_NAME) psql -U $(POSTGRES_USER) -d $(POSTGRES_DATABASE) -c "\
		CREATE SCHEMA IF NOT EXISTS snaptest; \
		CREATE TABLE IF NOT EXISTS snaptest.users ( \
			id SERIAL PRIMARY KEY, \
			username VARCHAR(100) NOT NULL, \
			email VARCHAR(100), \
			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP \
		); \
		CREATE TABLE IF NOT EXISTS snaptest.products ( \
			id SERIAL PRIMARY KEY, \
			name VARCHAR(200) NOT NULL, \
			price DECIMAL(10,2), \
			quantity INTEGER \
		);"
	@echo "✅ Test database initialized"

# Run PostgreSQL query
postgres-query:
	@echo "Enter your SQL query (or use: make postgres-query QUERY='SELECT * FROM snaptest.users')"
	@if [ -n "$(QUERY)" ]; then \
		docker exec $(POSTGRES_CONTAINER_NAME) psql -U $(POSTGRES_USER) -d $(POSTGRES_DATABASE) -c "$(QUERY)"; \
	else \
		read -p "SQL Query: " query; \
		docker exec $(POSTGRES_CONTAINER_NAME) psql -U $(POSTGRES_USER) -d $(POSTGRES_DATABASE) -c "$$query"; \
	fi

# Help for PostgreSQL commands
postgres-help:
	@echo "PostgreSQL Database Management Commands:"
	@echo "  make postgres-start    - Start PostgreSQL database"
	@echo "  make postgres-stop     - Stop and clean up PostgreSQL"
	@echo "  make postgres-restart  - Restart PostgreSQL database"
	@echo "  make postgres-logs     - View PostgreSQL logs"
	@echo "  make postgres-shell    - Access PostgreSQL shell (psql)"
	@echo "  make postgres-status   - Check PostgreSQL status"
	@echo "  make postgres-backup   - Backup PostgreSQL database"
	@echo "  make postgres-restore  - Restore PostgreSQL from backup"
	@echo "  make postgres-init     - Initialize test database and tables"
	@echo "  make postgres-query    - Run a SQL query"
	@echo "  make postgres-help     - Show this help message"
