@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include <awslib/AWSCommon>
!include <logos/docker>
!include <logos/python>
!include <logos/java>

skinparam groupInheritance 1

title Salesforce Mock Testing Architecture Components

actor developer as "Developer/Tester"
actor snaplogic_cloud as "SnapLogic Cloud"

component testing_framework as "<$python>\nTesting Framework" {
    rectangle robot_framework as "Robot Framework\nTest Suite" {
        package test_cases as "Test Cases"
        package test_resources as "Test Resources"
    }
}

component docker_compose_env as "<$docker>\nDocker Compose Environment" {
    
    rectangle groundplex_container as "<$java>\nGroundplex Container" {
        component jcc as "JCC Runtime\n(SnapLogic Node)"
        component truststore as "Java Truststore\n(SSL Certs)"
        
        jcc --> truststore : uses
    }
    
    rectangle mock_services as "Mock Services Layer" {
        component wiremock as "WireMock Server\n:8443 (HTTPS)\n:8080 (HTTP)" {
            database mappings as "Static Mappings\n(JSON Files)"
            database proxy_mappings as "Proxy Mappings\n(Forward to JSON-DB)"
        }
        
        component json_server as "JSON Server\n:3000" {
            database json_db as "JSON Database\n(salesforce-db.json)"
        }
        
        wiremock --> mappings : reads
        wiremock --> proxy_mappings : reads
        proxy_mappings ..> json_server : forwards to
        json_server <--> json_db : persists
    }
    
    rectangle data_services as "Supporting Services" {
        database oracle_db as "Oracle DB\n(Optional)"
        database postgres_db as "PostgreSQL\n(Optional)"
        component minio_s3 as "MinIO S3\n(Optional)"
        queue activemq as "ActiveMQ\n(Optional)"
    }
    
    jcc <--> wiremock : HTTPS/HTTP\nrequests
    jcc <..> oracle_db : optional\nconnection
    jcc <..> postgres_db : optional\nconnection
    jcc <..> minio_s3 : optional\nconnection
    jcc <..> activemq : optional\nconnection
}

component snaplogic_platform as "SnapLogic Platform" {
    rectangle pipeline_layer as "Pipeline Layer" {
        component salesforce_snap as "Salesforce Snap"
        component database_snaps as "Database Snaps"
        component s3_snap as "S3 Snap"
        component jms_snap as "JMS Snap"
    }
    
    salesforce_snap --> jcc : OAuth/REST API
    database_snaps ..> jcc : SQL queries
    s3_snap ..> jcc : S3 operations
    jms_snap ..> jcc : JMS messages
}

' Main interaction flows
developer --> testing_framework : writes/runs tests
testing_framework --> groundplex_container : controls
testing_framework --> mock_services : verifies

snaplogic_cloud --> jcc : manages
snaplogic_platform --> groundplex_container : executes on

' Key relationships
note right of wiremock
  **Mapping Selection Logic:**
  1. Check proxy_mappings first
  2. Fall back to static mappings
  3. Return 404 if no match
end note

note bottom of json_server
  **Stateful Operations:**
  - CREATE: POST /accounts
  - READ: GET /accounts/{id}
  - UPDATE: PATCH /accounts/{id}
  - DELETE: DELETE /accounts/{id}
end note

note left of truststore
  **Certificate Setup:**
  One-time installation of
  WireMock's self-signed cert
  enables HTTPS connections
end note

' Add sticky notes on the right side explaining the differences
note right of mappings #FFFFCC
  <b>ðŸ“Œ Static Mappings</b>
  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  <b>What:</b> Predefined JSON responses
  <b>Use Cases:</b>
  â€¢ OAuth authentication
  â€¢ API metadata/versions
  â€¢ Error scenarios
  â€¢ Quick smoke tests
  
  <b>Behavior:</b>
  â€¢ Returns same response every time
  â€¢ No data persistence
  â€¢ Fast response times
  â€¢ Stateless operations
  
  <b>Example:</b> 01-oauth-token.json
  Always returns same mock token
end note

note right of proxy_mappings #E8F5E9
  <b>ðŸ“Œ Proxy Mappings</b>
  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  <b>What:</b> Forwards to JSON Server
  <b>Use Cases:</b>
  â€¢ CRUD operations
  â€¢ Workflow testing
  â€¢ Data relationships
  â€¢ Integration tests
  
  <b>Behavior:</b>
  â€¢ Persists data changes
  â€¢ Maintains state across tests
  â€¢ Dynamic responses
  â€¢ Realistic data operations
  
  <b>Example:</b> 02-proxy-create-account.json
  Actually stores the account in DB
end note

note right #FFE0B2
  <b>ðŸ”‘ Key Difference</b>
  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  <b>Static:</b> "Fake it"
  â€¢ Pretends to do operations
  â€¢ Returns mock success
  â€¢ Data disappears
  
  <b>Proxy:</b> "Make it"
  â€¢ Actually performs operations
  â€¢ Real data persistence
  â€¢ Can query created data
  
  <b>Decision:</b>
  Need data to persist? â†’ Use Proxy
  Just need response? â†’ Use Static
end note

footer SnapLogic Confidential

@enduml